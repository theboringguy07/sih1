{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';const apiService={// Get internship recommendations\nasync getRecommendations(profileData){try{const response=await axios.post(\"\".concat(API_BASE_URL,\"/recommend\"),profileData);return response.data.recommendations;}catch(error){var _error$response,_error$response$data;throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Failed to get recommendations');}},// Parse resume\nasync parseResume(file){try{const formData=new FormData();formData.append('file',file);const response=await axios.post(\"\".concat(API_BASE_URL,\"/parse-resume\"),formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Failed to parse resume');}},// Get all internships\nasync getAllInternships(){try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/internships\"));return response.data;}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'Failed to fetch internships');}},// Translate text\nasync translateText(text,targetLanguage){try{const response=await axios.post(\"\".concat(API_BASE_URL,\"/translate\"),{text,target_language:targetLanguage});return response.data.translated_text;}catch(error){var _error$response4,_error$response4$data;throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||'Failed to translate text');}},// Create/update user profile\nasync saveProfile(profileData){try{const response=await axios.post(\"\".concat(API_BASE_URL,\"/profile\"),profileData);return response.data;}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||'Failed to save profile');}},// Health check\nasync healthCheck(){try{const response=await axios.get(\"\".concat(API_BASE_URL,\"/health\"));return response.data;}catch(error){throw new Error('API service is not available');}}};export default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiService","getRecommendations","profileData","response","post","concat","data","recommendations","error","_error$response","_error$response$data","Error","parseResume","file","formData","FormData","append","headers","_error$response2","_error$response2$data","getAllInternships","get","_error$response3","_error$response3$data","translateText","text","targetLanguage","target_language","translated_text","_error$response4","_error$response4$data","saveProfile","_error$response5","_error$response5$data","healthCheck"],"sources":["C:/Users/dhruv/sih/pm-internship-recommendation/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst apiService = {\r\n  // Get internship recommendations\r\n  async getRecommendations(profileData) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/recommend`, profileData);\r\n      return response.data.recommendations;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to get recommendations');\r\n    }\r\n  },\r\n\r\n  // Parse resume\r\n  async parseResume(file) {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      const response = await axios.post(`${API_BASE_URL}/parse-resume`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to parse resume');\r\n    }\r\n  },\r\n\r\n  // Get all internships\r\n  async getAllInternships() {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/internships`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to fetch internships');\r\n    }\r\n  },\r\n\r\n  // Translate text\r\n  async translateText(text, targetLanguage) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/translate`, {\r\n        text,\r\n        target_language: targetLanguage\r\n      });\r\n      return response.data.translated_text;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to translate text');\r\n    }\r\n  },\r\n\r\n  // Create/update user profile\r\n  async saveProfile(profileData) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/profile`, profileData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to save profile');\r\n    }\r\n  },\r\n\r\n  // Health check\r\n  async healthCheck() {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/health`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('API service is not available');\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}