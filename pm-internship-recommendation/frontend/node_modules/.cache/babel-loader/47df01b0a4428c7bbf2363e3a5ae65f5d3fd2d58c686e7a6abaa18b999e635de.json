{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst apiService = {\n  // Get internship recommendations\n  async getRecommendations(profileData) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/recommend`, profileData);\n      return response.data.recommendations;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to get recommendations');\n    }\n  },\n  // Parse resume\n  async parseResume(file) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await axios.post(`${API_BASE_URL}/parse-resume`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to parse resume');\n    }\n  },\n  // Get all internships\n  async getAllInternships() {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/internships`);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to fetch internships');\n    }\n  },\n  // Translate text\n  async translateText(text, targetLanguage) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/translate`, {\n        text,\n        target_language: targetLanguage\n      });\n      return response.data.translated_text;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to translate text');\n    }\n  },\n  // Create/update user profile\n  async saveProfile(profileData) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/profile`, profileData);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to save profile');\n    }\n  },\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/health`);\n      return response.data;\n    } catch (error) {\n      throw new Error('API service is not available');\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiService","getRecommendations","profileData","response","post","data","recommendations","error","_error$response","_error$response$data","Error","parseResume","file","formData","FormData","append","headers","_error$response2","_error$response2$data","getAllInternships","get","_error$response3","_error$response3$data","translateText","text","targetLanguage","target_language","translated_text","_error$response4","_error$response4$data","saveProfile","_error$response5","_error$response5$data","healthCheck"],"sources":["C:/Users/HP/OneDrive/Desktop/sih1/pm-internship-recommendation/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst apiService = {\r\n  // Get internship recommendations\r\n  async getRecommendations(profileData) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/recommend`, profileData);\r\n      return response.data.recommendations;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to get recommendations');\r\n    }\r\n  },\r\n\r\n  // Parse resume\r\n  async parseResume(file) {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      const response = await axios.post(`${API_BASE_URL}/parse-resume`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to parse resume');\r\n    }\r\n  },\r\n\r\n  // Get all internships\r\n  async getAllInternships() {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/internships`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to fetch internships');\r\n    }\r\n  },\r\n\r\n  // Translate text\r\n  async translateText(text, targetLanguage) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/translate`, {\r\n        text,\r\n        target_language: targetLanguage\r\n      });\r\n      return response.data.translated_text;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to translate text');\r\n    }\r\n  },\r\n\r\n  // Create/update user profile\r\n  async saveProfile(profileData) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/profile`, profileData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to save profile');\r\n    }\r\n  },\r\n\r\n  // Health check\r\n  async healthCheck() {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/health`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('API service is not available');\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}